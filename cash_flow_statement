import pandas as pd



def create_cf_statement(income_statement, trial_balance,cash_balances,general_journal):
    num_empty_rows = 2
    empty_rows = pd.DataFrame(
        {'account': [None] * num_empty_rows, 'Amount': [None] * num_empty_rows})

    general_journal['credit_flag'] = general_journal['credit_flag'].fillna('N')

    ### Create credit entries
    credit_entries = general_journal[general_journal['credit_flag'] == 'Y'].copy()
    credit_entries['Net D/C'] = credit_entries['debit'] - credit_entries['credit']
    credit_entries = credit_entries[(credit_entries['account'] != 'Cash') & (credit_entries['account'] != 'PP&E') & (credit_entries['account'] != 'Credit Card')]
    mask = credit_entries["credit_flag"].eq("Y")
    total = (credit_entries.loc[mask, "Net D/C"]
             .astype(str).str.replace(",", "", regex=False)
             .pipe(pd.to_numeric, errors="coerce")
             .fillna(0)
             .sum())

    credit_entries_out = pd.DataFrame({"account": ["Credit Card"], "Amount": [total]})





    ### Operating Cash Flow Statement
    net_income_df = income_statement[income_statement["account"] == "Net Income"].reset_index(drop=True)
    net_income_df.drop(columns='Type', inplace=True)



    op_reduction_accounts = ['Accounts Receivable']
    op_increase_accounts = ['Unearned Rent']

    non_cash_revenues = trial_balance[trial_balance['account'].isin(op_reduction_accounts)].copy()
    non_cash_revenues = non_cash_revenues[['account','Net D/C']]
    non_cash_revenues['Amount'] = non_cash_revenues['Net D/C']
    non_cash_revenues.drop(columns='Net D/C',inplace=True)


    non_cash_expenses = trial_balance[trial_balance['account'].isin(op_increase_accounts)].copy()
    non_cash_expenses = non_cash_expenses[['account','Net D/C']]
    non_cash_expenses['Amount'] = non_cash_expenses['Net D/C']
    non_cash_expenses.drop(columns='Net D/C', inplace=True)


    merged_df = pd.concat([net_income_df,non_cash_expenses,non_cash_revenues,credit_entries_out])

    total_value = (
            merged_df.loc[merged_df["account"] == "Net Income", "Amount"].sum()
            - merged_df.loc[merged_df["account"] == "Unearned Rent", "Amount"].sum()
            - merged_df.loc[merged_df["account"] == "Accounts Receivable", "Amount"].sum()
            + credit_entries.loc[credit_entries['credit_flag'] == 'Y',"Net D/C"].sum()

    )

    merged_df.loc[len(merged_df)] = ["Operating Cash Flows", total_value]
    merged_df = merged_df.reset_index(drop=True)

    operating_cf = merged_df


    #### Investing
    non_credit_entries = general_journal[general_journal['credit_flag'] == 'N']
    non_credit_entries = non_credit_entries[non_credit_entries['account'] == 'PP&E']
    mask_1 = non_credit_entries["credit_flag"].eq("N")
    total_i = (non_credit_entries.loc[mask_1, "debit"]
             .astype(str).str.replace(",", "", regex=False)
             .pipe(pd.to_numeric, errors="coerce")
             .fillna(0)
             .sum())

    investing_cf = pd.DataFrame({"account": ["PP&E"], "Amount": [total_i]})


    ### Financing

    credit_repayment = general_journal[general_journal['credit_flag'] == 'Y']
    credit_repayment = credit_repayment[credit_repayment['account'] == 'Cash']
    mask_2 = credit_repayment["credit_flag"].eq("Y")
    total_f = (credit_repayment.loc[mask_2, "credit"]
               .astype(str).str.replace(",", "", regex=False)
               .pipe(pd.to_numeric, errors="coerce")
               .fillna(0)
               .sum())
    credit_repayment_f = pd.DataFrame({"account": ["Chase Bank - Repayment"], "Amount": [total_f]})



    financing_accounts = trial_balance[trial_balance['account'].isin(['capital-pt','capital-rc'])].copy()
    financing_accounts = financing_accounts[['account','Net D/C']]
    financing_accounts['Amount'] = financing_accounts['Net D/C'].abs()
    financing_accounts.drop(columns={'Net D/C'}, inplace=True)

    financing_cf = pd.concat([credit_repayment_f,financing_accounts])



    ### Beginning Cash Balances
    cash_bal = cash_balances[cash_balances['gl_code'] == 1511].copy()

    cash_bal.drop(columns={'period'})
    cash_bal.rename(columns = {'balance': 'Amount'}, inplace=True)
    cash_bal = cash_bal[['account', 'Amount']]
    cash_bal['account'] = cash_bal['account'].replace('Cash', 'Beginning Cash Balance').copy()





    #### Merge All

    #merge_all = pd.concat([operating_cf, empty_rows,investing_cf, empty_rows,financing_cf,empty_rows,cash_bal])

    # Function to add 'type' only to first row
    def add_type_column(df, label):
        df = df.copy()
        df.insert(0, 'type', '')  # Add empty column on far left
        df.loc[df.index[0], 'type'] = label  # Assign label to top row only
        return df

    # Apply to each section
    operating_cf = add_type_column(operating_cf, 'Operating Cash Flow')
    investing_cf = add_type_column(investing_cf, 'Investing Cash Flow')
    financing_cf = add_type_column(financing_cf, 'Financing Cash Flow')


    merge_all = pd.concat([operating_cf, empty_rows, investing_cf, empty_rows, financing_cf, empty_rows, cash_bal])


    change_in_cash = (
        merge_all.loc[merge_all['account'] == 'Operating Cash Flows', 'Amount'].sum()
        - merge_all.loc[merge_all['account'] == 'PP&E', 'Amount'].sum()
        - merge_all.loc[merge_all['account'] == 'Chase Bank - Repayment', 'Amount'].sum()
        + merge_all.loc[merge_all['account'].isin(['capital-pt','capital-rc']), "Amount"].sum()
    )
    merge_all.loc[len(merge_all)] = ["","Change in Cash Flows", change_in_cash]




    ending_cash_bal = merge_all.loc[merge_all['account'] == 'Beginning Cash Balance', 'Amount'] .sum() + merge_all.loc[merge_all['account'] == 'Change in Cash Flows', 'Amount'].sum()


    merge_all.loc[len(merge_all) +2] = ["","Ending Cash Balance", ending_cash_bal]




    final_cf = merge_all

    final_cf.rename(columns={'type': 'Type', 'account':'Account'}, inplace=True)




    return final_cf
