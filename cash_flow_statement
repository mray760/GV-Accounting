import pandas as pd



def create_cf_statement(income_statement, trial_balance,cash_balances):
    num_empty_rows = 2
    empty_rows = pd.DataFrame(
        {'account': [None] * num_empty_rows, 'Amount': [None] * num_empty_rows})

    ### Operating Cash Flow Statement
    net_income_df = income_statement[income_statement["account"] == "Net Income"].reset_index(drop=True)
    net_income_df.drop(columns='Type', inplace=True)

    print(net_income_df)

    print()

    op_reduction_accounts = ['Accounts Receivable']
    op_increase_accounts = ['Credit Card','Unearned Rent']

    non_cash_revenues = trial_balance[trial_balance['account'].isin(op_reduction_accounts)].copy()
    non_cash_revenues = non_cash_revenues[['account','Net D/C']]
    non_cash_revenues['Amount'] = non_cash_revenues['Net D/C']
    non_cash_revenues.drop(columns='Net D/C',inplace=True)


    non_cash_expenses = trial_balance[trial_balance['account'].isin(op_increase_accounts)].copy()
    non_cash_expenses = non_cash_expenses[['account','Net D/C']]
    non_cash_expenses['Amount'] = non_cash_expenses['Net D/C']
    non_cash_expenses.drop(columns='Net D/C', inplace=True)

    print(non_cash_revenues)

    print()

    print(non_cash_expenses)

    merged_df = pd.concat([net_income_df,non_cash_expenses,non_cash_revenues])

    total_value = (
            merged_df.loc[merged_df["account"] == "Net Income", "Amount"].sum()
            - merged_df.loc[merged_df["account"] == "Unearned Rent", "Amount"].sum()
            - merged_df.loc[merged_df["account"] == "Credit Card", "Amount"].sum()
            - merged_df.loc[merged_df["account"] == "Accounts Receivable", "Amount"].sum()
    )

    merged_df.loc[len(merged_df)] = ["Operating Cash Flows", total_value]

    operating_cf = merged_df


    #### Investing

    investing_accounts = trial_balance[trial_balance['account'] == 'PP&E'].copy()
    investing_accounts = investing_accounts[['account','Net D/C']]
    investing_accounts['Amount'] = investing_accounts['Net D/C'].abs()
    investing_accounts.drop(columns={'Net D/C'}, inplace=True)





    ### Financing

    financing_accounts = trial_balance[trial_balance['account'].isin(['capital-pt','capital-rc'])].copy()
    financing_accounts = financing_accounts[['account','Net D/C']]
    financing_accounts['Amount'] = financing_accounts['Net D/C'].abs()
    financing_accounts.drop(columns={'Net D/C'}, inplace=True)


    ### Beginning Cash Balances

    cash_bal = cash_balances
    cash_bal['account'] = 'Beginning Cash Balance'
    cash_bal.drop(columns={'period'})
    cash_bal.rename(columns = {'ending_balance': 'Amount'}, inplace=True)
    cash_bal = cash_bal[['account', 'Amount']]




    #### Merge All

    merge_all = pd.concat([operating_cf, empty_rows,investing_accounts, empty_rows,financing_accounts,empty_rows,cash_bal])


    change_in_cash = (
        merge_all.loc[merge_all['account'] == 'Operating Cash Flows', 'Amount'].sum()
        - merge_all.loc[merge_all['account'] == 'PP&E', 'Amount'].sum()
        + merge_all.loc[merge_all['account'].isin(['capital-pt','capital-rc']), "Amount"].sum()
    )
    merge_all.loc[len(merge_all) +1] = ["Change in Cash Flows", change_in_cash]


    ending_cash_bal = merge_all.loc[merge_all['account'] == 'Beginning Cash Balance', 'Amount'] .sum() + merge_all.loc[merge_all['account'] == 'Change in Cash Flows', 'Amount'].sum()


    merge_all.loc[len(merge_all) +2] = ["Ending Cash Balance", ending_cash_bal]

    final_cf = merge_all

    print(merge_all)


    return final_cf
