import pandas as pd
from COA import GL_CODE_MAP



def create_journal_from_charges(charges):
    journal = []

    for _, row in charges.iterrows():
        # Revenue from charge
        if row['charge'] > 0:
            journal.append({
                'date': row['date'],
                'account': 'Storage Revenue',
                'gl_code': GL_CODE_MAP['Storage Revenue'],
                'debit': 0,
                'credit': row['charge'],
                'description': f"Charge - {row['description']}",
                'tenant': row['tenant_name']
            })

        # Cash payment
        if row['cash_payment'] > 0:
            journal.append({
                'date': row['date'],
                'account': 'Cash',
                'gl_code': GL_CODE_MAP['Cash'],
                'debit': row['cash_payment'],
                'credit': 0,
                'description': f"Cash - {row['description']}",
                'tenant': row['tenant_name']
            })

        # A/R for unpaid charge
        if row['outstanding_charge'] > 0:
            journal.append({
                'date': row['date'],
                'account': 'Accounts Receivable',
                'gl_code': GL_CODE_MAP['Accounts Receivable'],
                'debit': row['outstanding_charge'],
                'credit': 0,
                'description': f"A/R - {row['description']}",
                'tenant': row['tenant_name']
            })

        # Advance payment only
        if row['charge'] == 0 and row['cash_payment'] > 0:
            journal.append({
                'date': row['date'],
                'account': 'Unearned Rent',
                'gl_code': GL_CODE_MAP['Unearned Rent'],
                'debit': 0,
                'credit': row['cash_payment'],
                'description': f"Advance Payment - {row['description']}",
                'tenant': row['tenant_name']
            })

    return pd.DataFrame(journal)

# Generate journal from Transactions
def create_journal_from_transactions(transactions):
    journal = []
    transactions['cash_amount'] = transactions['cash_amount'].fillna(0)
    transactions['credit_amount'] = transactions['credit_amount'].fillna(0)



    for _, row in transactions.iterrows():
        ##Cash Expense
        if row['account'] =='expense' and row['cash_amount'] > 0:
        # Debit: Expense
            journal.append({
                'date': row['date'],
                'account': row['account'],
                'gl_code': GL_CODE_MAP['Expense'],
                'debit': row['cash_amount'],
                'credit': 0,
                'description': f"Expense - {row['description']}",
                'tenant': None
            })
            # Credit: Cash
            journal.append({
                'date': row['date'],
                'account': 'Cash',
                'gl_code': GL_CODE_MAP['Cash'],
                'debit': 0,
                'credit': row['cash_amount'],
                'description': f"Expense Payment - {row['description']}",
                'tenant': None
            })
        ## Credit Expense
        if row['credit_amount']>0 and row['account']=='expense':

            # Debit: Expense
            journal.append({
                'date': row['date'],
                'account': row['account'],
                'gl_code': GL_CODE_MAP['Expense'],
                'debit': row['credit_amount'],
                'credit': 0,
                'description': f"Expense - {row['description']}",
                'tenant': None
            })
            #Credit: Credit Card

            journal.append({
                'date': row['date'],
                'account': 'Credit Card',
                'gl_code': GL_CODE_MAP['Credit Card'],
                'debit': 0,
                'credit': row['credit_amount'],
                'description': f"Expense Payment - {row['description']}",
                'tenant': None
            })

        ## Protection Trust Capital Contribution
        if row['account'] =='capital-pt' and row['cash_amount'] > 0:

        # Debit: Cash
            journal.append({
                'date': row['date'],
                'account': 'Cash',
                'gl_code': GL_CODE_MAP['Cash'],
                'debit': row['cash_amount'],
                'credit': 0,
                'description': f"{row['description']}",
                'tenant': None
            })
            # Credit: Capital
            journal.append({
                'date': row['date'],
                'account': 'capital-pt',
                'gl_code': GL_CODE_MAP['capital-pt'],
                'debit': 0,
                'credit': row['cash_amount'],
                'description': f"{row['description']}",
                'tenant': None
            })




    return pd.DataFrame(journal)
