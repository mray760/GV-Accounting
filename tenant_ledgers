import pandas as pd
from load_excel import load_data
from sqlalchemy import create_engine, text
from dateutil.relativedelta import relativedelta
from datetime import datetime



current_period = '2025-09'
current_period = datetime.strptime(current_period, "%Y-%m").date()

filepath = '/Users/mattray/Desktop/GV Accouting/Inputs/Test/gv_tran_test_sept.xlsx'

charges_df, transactions_df = load_data(filepath)

HOST = "database-1.cm3s8qw6myma.us-east-1.rds.amazonaws.com"
PORT = 3306
DB   = "mvsgv"
USER = "mattray760"              # or master user
PWD  = "Uhglbk5478!"

# Basic (no SSL)
engine = create_engine(f"mysql+pymysql://{USER}:{PWD}@{HOST}:{PORT}/{DB}",
                       pool_pre_ping=True)


def initialize(engine,charges_df):
    charges_df.to_sql("monthly_balances_test_1", engine, if_exists="append",
                      index=False, chunksize=1000, method="multi")
    return print("This has been successfully uploaded")




def get_openings_df(conn, target_month):

    prior = target_month - relativedelta(months=1)
    sql = text("""
       Select * from monthly_balances_test_1
    """)
    opening_df = pd.read_sql(sql, conn, params={"prior": prior})

    opening_df["opening_balance"] = opening_df["outstanding_balance"].fillna(0).astype(int)
    return opening_df



# Create tenant ledgers
def create_closing_df(transactions):
    ledger = []

    for _, row in transactions.iterrows():
        ledger.append({
            'tenant': row['tenant_name'],
            'unit_number': row['unit_number'],
            'Period': row['Period'],
            'description': row['description'],
            'monthly_rate': row['monthly_rate'],
            'late_fees_charge': row['late_fees_charge'],
            'late_fees_payment': row['late_fees_payment'],
            'cash_payment': row['cash_payment'],
            'write_off': row['write_off'],
            'credit': row['credit'],
            'auction': row['auction']

        })

    df = pd.DataFrame(ledger)
    df['outstanding_amount'] = df['monthly_rate'].fillna(0)  - df['cash_payment'].fillna(0) + df['late_fees_charge'].fillna(0) - df['late_fees_payment'].fillna(0) - df['credit'].fillna(0) - df['write_off'].fillna(0) - df['auction'].fillna(0)
    df['outstanding balance'] = df.groupby('unit_number')['outstanding_amount'].cumsum()
    closing_df = df
    return closing_df


def merge_and_calc(opening_df,closing_df):
    closing_df_renamed = closing_df.rename(columns={
        "description": "description_new",
        "monthly_rate": "monthly_rate_new",
        "late_fees_charge": "late_fees_charge_new",
        "late_fees_payment": "late_fees_payment_new",
        "cash_payment": "cash_payment_new",
        "write_off": "write_off_new",
        "credit": "credit_new",
        "auction": "auction_new",
        "outstanding_amount": "outstanding_amount_new",
        "outstanding balance": "outstanding_balance_new"
            })

    #merge df
    merged_df = pd.merge(opening_df, closing_df_renamed, on='unit_number', how="inner")
    merged_df = merged_df[[ 'unit_number', 'opening_balance',
                   'tenant', 'Period_y', 'description_new', 'monthly_rate_new',
                   'late_fees_charge_new', 'late_fees_payment_new', 'cash_payment_new',
                   'write_off_new', 'credit_new', 'auction_new', 'outstanding_amount_new',
                   'outstanding_balance_new']]

    col_index = merged_df.columns.get_loc("unit_number")
    df = merged_df.iloc[:, col_index:]


    #calculate ending balances
    df['outstanding_balances_2'] = df['opening_balance'].fillna(0) + df['monthly_rate_new'].fillna(0) - df['cash_payment_new'].fillna(0) + df['late_fees_charge_new'].fillna(0) - df[
        'late_fees_payment_new'].fillna(0) - df['credit_new'].fillna(0) - df['write_off_new'].fillna(0) - df['auction_new'].fillna(0)

    df = df[['tenant', 'unit_number', 'Period_y', 'description_new', 'opening_balance','monthly_rate_new','cash_payment_new','late_fees_charge_new','late_fees_payment_new','write_off_new','auction_new','outstanding_balances_2']]

    new_df = df

    return new_df



def run_pipeline(charges_df):
    opening_df = get_openings_df(conn=engine,target_month=current_period)
    closing_df = create_closing_df(charges_df)
    merged_df = merge_and_calc(opening_df,closing_df)
    merged_df = merged_df.rename(columns = {
        "Period_y": "Period",
        "description_new": "description",
        "monthly_rate_new": "monthly_rate",
        "late_fees_charge_new": "late_fees_charge",
        "late_fees_payment_new": "late_fees_payment",
        "cash_payment_new": "cash_payment",
        "write_off_new": "write_off",
        "credit_new": "credit",
        "auction_new": "auction",
        "outstanding_balances_2": "outstanding_balance"
    })
    return merged_df



new_df = run_pipeline(charges_df)

new_df.to_excel('/Users/mattray/Desktop/GV Accouting/Outputs/Test/balance_test_3.xlsx')
